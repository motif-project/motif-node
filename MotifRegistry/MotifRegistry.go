// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package MotifRegistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// Quorum is an auto generated low-level Go binding around an user-defined struct.
type Quorum struct {
	Strategies []StrategyParams
}

// StrategyParams is an auto generated low-level Go binding around an user-defined struct.
type StrategyParams struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// MotifRegistryMetaData contains all meta data concerning the MotifRegistry contract.
var MotifRegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deregisterOperator\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getLastCheckpointOperatorWeight\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLastCheckpointThresholdWeight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLastCheckpointThresholdWeightAtBlock\",\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLastCheckpointTotalWeight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLastCheckpointTotalWeightAtBlock\",\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLastestOperatorSigningKey\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorBtcPublicKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorSigningKeyAtBlock\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorWeight\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorWeightAtBlock\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_serviceManager\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_thresholdWeight\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_quorum\",\"type\":\"tuple\",\"internalType\":\"structQuorum\",\"components\":[{\"name\":\"strategies\",\"type\":\"tuple[]\",\"internalType\":\"structStrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isOperatorBtcKeyRegistered\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isValidSignature\",\"inputs\":[{\"name\":\"_dataHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_signatureData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"minimumWeight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operatorRegistered\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"quorum\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structQuorum\",\"components\":[{\"name\":\"strategies\",\"type\":\"tuple[]\",\"internalType\":\"structStrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperatorWithSignature\",\"inputs\":[{\"name\":\"_operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"_signingKey\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"btcPublicKey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registerOperatorWithSignature\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateMinimumWeight\",\"inputs\":[{\"name\":\"_newMinimumWeight\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_operators\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateOperatorSigningKey\",\"inputs\":[{\"name\":\"_newSigningKey\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateOperators\",\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateOperatorsForQuorum\",\"inputs\":[{\"name\":\"operatorsPerQuorum\",\"type\":\"address[][]\",\"internalType\":\"address[][]\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateQuorumConfig\",\"inputs\":[{\"name\":\"_quorum\",\"type\":\"tuple\",\"internalType\":\"structQuorum\",\"components\":[{\"name\":\"strategies\",\"type\":\"tuple[]\",\"internalType\":\"structStrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}]},{\"name\":\"_operators\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateStakeThreshold\",\"inputs\":[{\"name\":\"_thresholdWeight\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MinimumWeightUpdated\",\"inputs\":[{\"name\":\"_old\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_new\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorBtcKeyRegistered\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"btcPublicKey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorBtckeyDeregistered\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorDeregistered\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"_avs\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRegistered\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"_avs\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorWeightUpdated\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"oldWeight\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"newWeight\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QuorumUpdated\",\"inputs\":[{\"name\":\"_old\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structQuorum\",\"components\":[{\"name\":\"strategies\",\"type\":\"tuple[]\",\"internalType\":\"structStrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}]},{\"name\":\"_new\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structQuorum\",\"components\":[{\"name\":\"strategies\",\"type\":\"tuple[]\",\"internalType\":\"structStrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SigningKeyUpdate\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"updateBlock\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"newSigningKey\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"oldSigningKey\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ThresholdWeightUpdated\",\"inputs\":[{\"name\":\"_thresholdWeight\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TotalWeightUpdated\",\"inputs\":[{\"name\":\"oldTotalWeight\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"newTotalWeight\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UpdateMinimumWeight\",\"inputs\":[{\"name\":\"oldMinimumWeight\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"newMinimumWeight\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"InsufficientSignedStake\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientWeight\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidQuorum\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidReferenceBlock\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignedWeight\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidThreshold\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LengthMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MustUpdateAllOperators\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotSorted\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OperatorAlreadyRegistered\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OperatorNotRegistered\",\"inputs\":[]}]",
	Bin: "0x608060405234801561000f575f80fd5b50600436106101db575f3560e01c8063696255be11610109578063ab1189951161009e578063dec5d1f61161006e578063dec5d1f6146103ea578063e03b645e146101f2578063ec7fbb31146103fd578063f2fde38b14610428575f80fd5b8063ab118995146103a9578063b933fa74146103bc578063c8bc8723146103c4578063cdcd3581146103d7575f80fd5b8063857dc190116100d9578063857dc1901461036a5780638da5cb5b14610372578063955f2d901461038357806398ec1ac914610396575f80fd5b8063696255be14610334578063715018a614610347578063743c31f41461034f5780638456cb5914610362575f80fd5b80633b242e4a1161017f5780635140a5481161014f5780635140a548146102cc5780635c975abb146102df5780635e1042e8146102f65780635ef5332914610321575f80fd5b80633b242e4a146102965780633f4ba83a146102a957806340bf2fb7146102b157806344e058fe146102b9575f80fd5b80631703a018116101ba5780631703a018146102465780631e4cd85e1461025b578063314f3a491461026e57806339c2182714610276575f80fd5b8062cf2ab5146101df5780630dba3394146101f45780631626ba7e1461021a575b5f80fd5b6101f26101ed3660046122ff565b61043b565b005b610207610202366004612349565b610447565b6040519081526020015b60405180910390f35b61022d6102283660046123d7565b610462565b6040516001600160e01b03199091168152602001610211565b61024e61049e565b604051610211919061247c565b610207610269366004612349565b61052f565b610207610544565b61028961028436600461248e565b610554565b60405161021191906124d7565b6102076102a436600461248e565b61066e565b6101f261068e565b606754610207565b6101f26102c7366004612526565b6106a0565b6101f26102da3660046125d9565b6107d0565b60975460ff165b6040519015158152602001610211565b61030961030436600461269a565b6107f6565b6040516001600160a01b039091168152602001610211565b6101f261032f3660046126c4565b61081e565b6101f26103423660046126db565b61082f565b6101f2610849565b6101f261035d36600461248e565b61085a565b6101f2610893565b6101f26108a3565b6033546001600160a01b0316610309565b610207610391366004612714565b610951565b6102076103a436600461248e565b61097b565b6101f26103b7366004612823565b610bc0565b610207610cd9565b6102e66103d236600461248e565b610ce4565b6103096103e536600461248e565b610d13565b6101f26103f8366004612877565b610d33565b6102e661040b36600461248e565b6001600160a01b03165f908152606e602052604090205460ff1690565b6101f261043636600461248e565b610d44565b61044481610dba565b50565b5f61045c606b63ffffffff80851690610e0616565b92915050565b5f805f808480602001905181019061047a919061298b565b92509250925061048c86848484610f0e565b50630b135d3f60e11b95945050505050565b604080516020810190915260608152604080516066805460208181028401850185528301818152929391928492909184915f9085015b82821015610522575f84815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b0316818301528252600190920191016104d4565b5050505081525050905090565b5f61045c606c63ffffffff80851690610e0616565b5f61054f606b610fbd565b905090565b6001600160a01b0381165f90815260c9602052604081208054606092919061057b90612a58565b9050116105c95760405162461bcd60e51b815260206004820152601760248201527613dc195c985d1bdc881b9bdd081c9959da5cdd195c9959604a1b60448201526064015b60405180910390fd5b6001600160a01b0382165f90815260c96020526040902080546105eb90612a58565b80601f016020809104026020016040519081016040528092919081815260200182805461061790612a58565b80156106625780601f1061063957610100808354040283529160200191610662565b820191905f5260205f20905b81548152906001019060200180831161064557829003601f168201915b50505050509050919050565b6001600160a01b0381165f908152606d6020526040812061045c90610fbd565b610696611016565b61069e611070565b565b602181146106fa5760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420426974636f696e207075626c6963206b6579206c656e67746044820152600d60fb1b60648201526084016105c0565b335f90815260c960205260409020805461071390612a58565b1590506107625760405162461bcd60e51b815260206004820152601b60248201527f4f70657261746f7220616c72656164792072656769737465726564000000000060448201526064016105c0565b61076d3385856110c2565b335f90815260c960205260409020610786828483612adb565b50336001600160a01b03167f0d8984808ea8788ea495935f77731d3f13c887a86c455c961aed095335c76bd883836040516107c2929190612b94565b60405180910390a250505050565b6107f2825f815181106107e5576107e5612bc2565b60200260200101516111f1565b5050565b6001600160a01b0382165f908152606a602052604081206108179083610e06565b9392505050565b610826611016565b61044481611214565b610837611016565b61084082611257565b6107f281610dba565b610851611016565b61069e5f61129d565b335f908152606e602052604090205460ff16610889576040516325ec6c1f60e01b815260040160405180910390fd5b61044433826112ee565b61089b611016565b61069e61139e565b335f90815260c96020526040812080546108bc90612a58565b9050116109055760405162461bcd60e51b815260206004820152601760248201527613dc195c985d1bdc881b9bdd081c9959da5cdd195c9959604a1b60448201526064016105c0565b61090e336113db565b335f90815260c96020526040812061092591612132565b60405133907f230c2882fff3e13c75d0036d8cca217e2c2a8c0b330b704f5aa2203c21f43d5c905f90a2565b6001600160a01b0382165f908152606d602052604081206108179063ffffffff80851690610e0616565b5f8060665f01805480602002602001604051908101604052809291908181526020015f905b828210156109ee575f84815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b0316818301528252600190920191016109a0565b5050505090505f8082516001600160401b03811115610a0f57610a0f612194565b604051908082528060200260200182016040528015610a38578160200160208202803683370190505b5090505f5b8351811015610a9557838181518110610a5857610a58612bc2565b60200260200101515f0151828281518110610a7557610a75612bc2565b6001600160a01b0390921660209283029190910190910152600101610a3d565b50604051639004134760e01b81525f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639004134790610ae69089908690600401612bd6565b5f60405180830381865afa158015610b00573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b279190810190612c31565b90505f5b8451811015610b9357848181518110610b4657610b46612bc2565b6020026020010151602001516001600160601b0316828281518110610b6d57610b6d612bc2565b6020026020010151610b7f9190612cd0565b610b899085612ce7565b9350600101610b2b565b50610ba061271084612cfa565b92506067548310610bb5575090949350505050565b505f95945050505050565b5f54610100900460ff1615808015610bde57505f54600160ff909116105b80610bf75750303b158015610bf757505f5460ff166001145b610c5a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105c0565b5f805460ff191660011790558015610c7b575f805461ff0019166101001790555b610c868484846114f5565b610c8e611555565b8015610cd3575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b5f61054f606c610fbd565b6001600160a01b0381165f90815260c9602052604081208054829190610d0990612a58565b9050119050919050565b6001600160a01b0381165f908152606a6020526040812061045c90610fbd565b610d3b611016565b61084082611583565b610d4c611016565b6001600160a01b038116610db15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105c0565b6104448161129d565b5f805b8251811015610dfc57610de8838281518110610ddb57610ddb612bc2565b60200260200101516116d5565b610df29083612d19565b9150600101610dbd565b50610cd3816117f8565b5f438210610e565760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016105c0565b82545f5b81811015610eb7575f610e6d8284611862565b905084865f018281548110610e8457610e84612bc2565b5f9182526020909120015463ffffffff161115610ea357809250610eb1565b610eae816001612ce7565b91505b50610e5a565b8115610efa5784610ec9600184612d40565b81548110610ed957610ed9612bc2565b5f9182526020909120015464010000000090046001600160e01b0316610efc565b5f5b6001600160e01b031695945050505050565b5f835190505f805f80610f2285885161187c565b5f5b85811015610fa757888181518110610f3e57610f3e612bc2565b60200260200101519450610f5285886118bf565b9250610f5e8486611910565b610f82838b8a8481518110610f7557610f75612bc2565b6020026020010151611942565b8493505f610f908689611973565b9050610f9c8184612ce7565b925050600101610f24565b50610fb281876119c4565b505050505050505050565b80545f9080156110045782610fd3600183612d40565b81548110610fe357610fe3612bc2565b5f9182526020909120015464010000000090046001600160e01b0316611006565b5f5b6001600160e01b03169392505050565b6033546001600160a01b0316331461069e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105c0565b611078611a1e565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383165f908152606e602052604090205460ff16156110fb576040516342ee68b560e01b815260040160405180910390fd5b60658054905f61110a83612d53565b90915550506001600160a01b0383165f908152606e60205260408120805460ff1916600117905561113a846116d5565b9050611145816117f8565b505061115184836112ee565b606854604051639926ee7d60e01b81526001600160a01b0390911690639926ee7d906111839087908790600401612d6b565b5f604051808303815f87803b15801561119a575f80fd5b505af11580156111ac573d5f803e3d5ffd5b50506068546040516001600160a01b03918216935090871691507fa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c1905f90a350505050565b60655481511461043b5760405163169efb5b60e11b815260040160405180910390fd5b61121f606c82611a67565b50506040518181527f9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b9060200160405180910390a150565b606780549082905560408051828152602081018490527f713ca53b88d6eb63f5b1854cb8cbdd736ec51eda225e46791aa9298b0160648f91015b60405180910390a15050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382165f908152606a6020526040812061130e90610fbd565b9050806001600160a01b0316826001600160a01b03160361132e57505050565b6001600160a01b038381165f908152606a60205260409020611351918416611a67565b50506040516001600160a01b0382811682528084169143918616907fd061168252f441733658f09e4d8f5b2d998ed4ef24a2bbfd6ceca52ea13150029060200160405180910390a4505050565b6113a6611b8a565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110a53390565b6001600160a01b0381165f908152606e602052604090205460ff16611413576040516325ec6c1f60e01b815260040160405180910390fd5b60658054905f61142283612db5565b90915550506001600160a01b0381165f908152606e60205260408120805460ff1916905561144f826116d5565b905061145a816117f8565b50506068546040516351b27a6d60e11b81526001600160a01b0384811660048301529091169063a364f4da906024015f604051808303815f87803b1580156114a0575f80fd5b505af11580156114b2573d5f803e3d5ffd5b50506068546040516001600160a01b03918216935090851691507f31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed580905f90a35050565b5f54610100900460ff1661151b5760405162461bcd60e51b81526004016105c090612dca565b606880546001600160a01b0319166001600160a01b03851617905561153f82611214565b61154881611583565b611550611bd0565b505050565b5f54610100900460ff1661157b5760405162461bcd60e51b81526004016105c090612dca565b61069e611bfe565b61158c81611c30565b6115a95760405163d173577960e01b815260040160405180910390fd5b6040805160668054602081810284018501855283018181525f9484928491879085015b8282101561161a575f84815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b0316818301528252600190920191016115cc565b505050915250909150606690505f6116328282612169565b50505f5b8251518110156116a35782518051606691908390811061165857611658612bc2565b6020908102919091018101518254600181810185555f94855293839020825192909301516001600160601b0316600160a01b026001600160a01b039092169190911791015501611636565b507f23aad4e61744ece164130aa415c1616e80136b0f0770e56589438b90b269265e8183604051611291929190612e15565b6001600160a01b0381165f908152606d602052604081208190819081906116fb90610fbd565b6001600160a01b0386165f908152606e602052604090205490915060ff16611760576117278184612e42565b9250825f036117395750909392505050565b6001600160a01b0385165f908152606d6020526040812061175991611a67565b50506117ab565b6117698561097b565b91506117758183612e42565b9250825f036117875750909392505050565b6001600160a01b0385165f908152606d602052604090206117a89083611a67565b50505b60408051828152602081018490526001600160a01b038716917f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe594910160405180910390a250909392505050565b5f80611804606b610fbd565b91505f6118118484612d19565b9150819050611821606b82611a67565b505060408051848152602081018490527f86dcf86b12dfeedea74ae9300dbdaa193bcce5809369c8177ea2f4eaaa65729b910160405180910390a150915091565b5f6118706002848418612cfa565b61081790848416612ce7565b80821461189f576040516001621398b960e31b0319815260040160405180910390fd5b815f036107f25760405163251f56a160e21b815260040160405180910390fd5b5f438263ffffffff16106118e65760405163e64f180f60e01b815260040160405180910390fd5b6001600160a01b0383165f908152606a602052604090206108179063ffffffff80851690610e0616565b806001600160a01b0316826001600160a01b0316106107f25760405163ba50f91160e01b815260040160405180910390fd5b6119566001600160a01b0384168383611cf3565b61155057604051638baa579f60e01b815260040160405180910390fd5b5f438263ffffffff161061199a5760405163e64f180f60e01b815260040160405180910390fd5b6001600160a01b0383165f908152606d602052604090206108179063ffffffff80851690610e0616565b5f6119ce82611e38565b9050808311156119f157604051634b05a0f760e11b815260040160405180910390fd5b5f6119fb83611e73565b905083811115610cd35760405163e121632f60e01b815260040160405180910390fd5b60975460ff1661069e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c0565b81545f90819081611a7786610fbd565b90505f82118015611ab357504386611a90600185612d40565b81548110611aa057611aa0612bc2565b5f9182526020909120015463ffffffff16145b15611b1057611ac185611eae565b86611acd600185612d40565b81548110611add57611add612bc2565b905f5260205f20015f0160046101000a8154816001600160e01b0302191690836001600160e01b03160217905550611b7c565b855f016040518060400160405280611b2743611f1a565b63ffffffff168152602001611b3b88611eae565b6001600160e01b0390811690915282546001810184555f938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b9250839150505b9250929050565b60975460ff161561069e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c0565b5f54610100900460ff16611bf65760405162461bcd60e51b81526004016105c090612dca565b61069e611f7e565b5f54610100900460ff16611c245760405162461bcd60e51b81526004016105c090612dca565b6097805460ff19169055565b80515f90818080805b8451811015611cd257848181518110611c5457611c54612bc2565b60200260200101515f01519250826001600160a01b0316846001600160a01b031610611c935760405163ba50f91160e01b815260040160405180910390fd5b829350848181518110611ca857611ca8612bc2565b6020026020010151602001516001600160601b031682611cc89190612ce7565b9150600101611c39565b506127108114611ce757505f95945050505050565b50600195945050505050565b5f805f611d008585611fad565b90925090505f816004811115611d1857611d18612e68565b148015611d365750856001600160a01b0316826001600160a01b0316145b15611d4657600192505050610817565b5f80876001600160a01b0316631626ba7e60e01b8888604051602401611d6d929190612e7c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611dab9190612e94565b5f60405180830381855afa9150503d805f8114611de3576040519150601f19603f3d011682016040523d82523d5f602084013e611de8565b606091505b5091509150818015611dfb575080516020145b8015611e2c57508051630b135d3f60e11b90611e209083016020908101908401612eaa565b6001600160e01b031916145b98975050505050505050565b5f438263ffffffff1610611e5f5760405163e64f180f60e01b815260040160405180910390fd5b61045c606b63ffffffff80851690610e0616565b5f438263ffffffff1610611e9a5760405163e64f180f60e01b815260040160405180910390fd5b61045c606c63ffffffff80851690610e0616565b5f6001600160e01b03821115611f165760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016105c0565b5090565b5f63ffffffff821115611f165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105c0565b5f54610100900460ff16611fa45760405162461bcd60e51b81526004016105c090612dca565b61069e3361129d565b5f808251604103611fe1576020830151604084015160608501515f1a611fd587828585612015565b94509450505050611b83565b825160400361200a5760208301516040840151611fff8683836120fa565b935093505050611b83565b505f90506002611b83565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561204a57505f905060036120f1565b8460ff16601b1415801561206257508460ff16601c14155b1561207257505f905060046120f1565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156120c3573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b0381166120eb575f600192509250506120f1565b91505f90505b94509492505050565b5f806001600160ff1b0383168161211660ff86901c601b612ce7565b905061212487828885612015565b935093505050935093915050565b50805461213e90612a58565b5f825580601f1061214d575050565b601f0160209004905f5260205f20908101906104449190612180565b5080545f8255905f5260205f209081019061044491905b5b80821115611f16575f8155600101612181565b634e487b7160e01b5f52604160045260245ffd5b604051606081016001600160401b03811182821017156121ca576121ca612194565b60405290565b604051602081016001600160401b03811182821017156121ca576121ca612194565b604080519081016001600160401b03811182821017156121ca576121ca612194565b604051601f8201601f191681016001600160401b038111828210171561223c5761223c612194565b604052919050565b5f6001600160401b0382111561225c5761225c612194565b5060051b60200190565b6001600160a01b0381168114610444575f80fd5b803561228581612266565b919050565b5f82601f830112612299575f80fd5b813560206122ae6122a983612244565b612214565b8083825260208201915060208460051b8701019350868411156122cf575f80fd5b602086015b848110156122f45780356122e781612266565b83529183019183016122d4565b509695505050505050565b5f6020828403121561230f575f80fd5b81356001600160401b03811115612324575f80fd5b6123308482850161228a565b949350505050565b63ffffffff81168114610444575f80fd5b5f60208284031215612359575f80fd5b813561081781612338565b5f6001600160401b0382111561237c5761237c612194565b50601f01601f191660200190565b5f82601f830112612399575f80fd5b81356123a76122a982612364565b8181528460208386010111156123bb575f80fd5b816020850160208301375f918101602001919091529392505050565b5f80604083850312156123e8575f80fd5b8235915060208301356001600160401b03811115612404575f80fd5b6124108582860161238a565b9150509250929050565b8051602080845281518482018190525f926040919083019082870190855b8181101561246f57835180516001600160a01b031684528601516001600160601b0316868401529285019291840191600101612438565b5090979650505050505050565b602081525f610817602083018461241a565b5f6020828403121561249e575f80fd5b813561081781612266565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61081760208301846124a9565b5f8083601f8401126124f9575f80fd5b5081356001600160401b0381111561250f575f80fd5b602083019150836020828501011115611b83575f80fd5b5f805f8060608587031215612539575f80fd5b84356001600160401b038082111561254f575f80fd5b9086019060608289031215612562575f80fd5b61256a6121a8565b823582811115612578575f80fd5b6125848a82860161238a565b8252506020830135602082015260408301356040820152809650506125ab6020880161227a565b945060408701359150808211156125c0575f80fd5b506125cd878288016124e9565b95989497509550505050565b5f80604083850312156125ea575f80fd5b82356001600160401b0380821115612600575f80fd5b818501915085601f830112612613575f80fd5b813560206126236122a983612244565b82815260059290921b84018101918181019089841115612641575f80fd5b8286015b848110156126775780358681111561265b575f80fd5b6126698c86838b010161228a565b845250918301918301612645565b509650508601359250508082111561268d575f80fd5b506124108582860161238a565b5f80604083850312156126ab575f80fd5b82356126b681612266565b946020939093013593505050565b5f602082840312156126d4575f80fd5b5035919050565b5f80604083850312156126ec575f80fd5b8235915060208301356001600160401b03811115612708575f80fd5b6124108582860161228a565b5f8060408385031215612725575f80fd5b823561273081612266565b9150602083013561274081612338565b809150509250929050565b5f602080838503121561275c575f80fd5b6127646121d0565b915082356001600160401b0381111561277b575f80fd5b8301601f8101851361278b575f80fd5b80356127996122a982612244565b81815260069190911b820183019083810190878311156127b7575f80fd5b928401925b8284101561281657604084890312156127d3575f80fd5b6127db6121f2565b84356127e681612266565b8152848601356001600160601b0381168114612800575f80fd5b81870152825260409390930192908401906127bc565b8552509295945050505050565b5f805f60608486031215612835575f80fd5b833561284081612266565b92506020840135915060408401356001600160401b03811115612861575f80fd5b61286d8682870161274b565b9150509250925092565b5f8060408385031215612888575f80fd5b82356001600160401b038082111561289e575f80fd5b6128aa8683870161274b565b935060208501359150808211156128bf575f80fd5b506124108582860161228a565b5f82601f8301126128db575f80fd5b815160206128eb6122a983612244565b82815260059290921b84018101918181019086841115612909575f80fd5b8286015b848110156122f45780516001600160401b0381111561292a575f80fd5b8701603f8101891361293a575f80fd5b84810151604061294c6122a983612364565b8281528b8284860101111561295f575f80fd5b828285018983015e5f9281018801929092525084525091830191830161290d565b805161228581612338565b5f805f6060848603121561299d575f80fd5b83516001600160401b03808211156129b3575f80fd5b818601915086601f8301126129c6575f80fd5b815160206129d66122a983612244565b82815260059290921b8401810191818101908a8411156129f4575f80fd5b948201945b83861015612a1b578551612a0c81612266565b825294820194908201906129f9565b91890151919750909350505080821115612a33575f80fd5b50612a40868287016128cc565b925050612a4f60408501612980565b90509250925092565b600181811c90821680612a6c57607f821691505b602082108103612a8a57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561155057805f5260205f20601f840160051c81016020851015612ab55750805b601f840160051c820191505b81811015612ad4575f8155600101612ac1565b5050505050565b6001600160401b03831115612af257612af2612194565b612b0683612b008354612a58565b83612a90565b5f601f841160018114612b37575f8515612b205750838201355b5f19600387901b1c1916600186901b178355612ad4565b5f83815260208120601f198716915b82811015612b665786850135825560209485019460019092019101612b46565b5086821015612b82575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b0383811682526040602080840182905284519184018290525f92858201929091906060860190855b81811015612c23578551851683529483019491830191600101612c05565b509098975050505050505050565b5f6020808385031215612c42575f80fd5b82516001600160401b03811115612c57575f80fd5b8301601f81018513612c67575f80fd5b8051612c756122a982612244565b81815260059190911b82018301908381019087831115612c93575f80fd5b928401925b82841015612cb157835182529284019290840190612c98565b979650505050505050565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761045c5761045c612cbc565b8082018082111561045c5761045c612cbc565b5f82612d1457634e487b7160e01b5f52601260045260245ffd5b500490565b8082018281125f831280158216821582161715612d3857612d38612cbc565b505092915050565b8181038181111561045c5761045c612cbc565b5f60018201612d6457612d64612cbc565b5060010190565b60018060a01b0383168152604060208201525f825160606040840152612d9460a08401826124a9565b90506020840151606084015260408401516080840152809150509392505050565b5f81612dc357612dc3612cbc565b505f190190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604081525f612e27604083018561241a565b8281036020840152612e39818561241a565b95945050505050565b8181035f831280158383131683831282161715612e6157612e61612cbc565b5092915050565b634e487b7160e01b5f52602160045260245ffd5b828152604060208201525f61233060408301846124a9565b5f82518060208501845e5f920191825250919050565b5f60208284031215612eba575f80fd5b81516001600160e01b031981168114610817575f80fdfea2646970667358221220cc704293b4c2364f53d9d726968174c746028282afbc1b8ba0fdc3a8252e878964736f6c63430008190033",
}

// MotifRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use MotifRegistryMetaData.ABI instead.
var MotifRegistryABI = MotifRegistryMetaData.ABI

// MotifRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MotifRegistryMetaData.Bin instead.
var MotifRegistryBin = MotifRegistryMetaData.Bin

// DeployMotifRegistry deploys a new Ethereum contract, binding an instance of MotifRegistry to it.
func DeployMotifRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, _delegationManager common.Address) (common.Address, *types.Transaction, *MotifRegistry, error) {
	parsed, err := MotifRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MotifRegistryBin), backend, _delegationManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MotifRegistry{MotifRegistryCaller: MotifRegistryCaller{contract: contract}, MotifRegistryTransactor: MotifRegistryTransactor{contract: contract}, MotifRegistryFilterer: MotifRegistryFilterer{contract: contract}}, nil
}

// MotifRegistry is an auto generated Go binding around an Ethereum contract.
type MotifRegistry struct {
	MotifRegistryCaller     // Read-only binding to the contract
	MotifRegistryTransactor // Write-only binding to the contract
	MotifRegistryFilterer   // Log filterer for contract events
}

// MotifRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type MotifRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MotifRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MotifRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MotifRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MotifRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MotifRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MotifRegistrySession struct {
	Contract     *MotifRegistry   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MotifRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MotifRegistryCallerSession struct {
	Contract *MotifRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// MotifRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MotifRegistryTransactorSession struct {
	Contract     *MotifRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MotifRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type MotifRegistryRaw struct {
	Contract *MotifRegistry // Generic contract binding to access the raw methods on
}

// MotifRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MotifRegistryCallerRaw struct {
	Contract *MotifRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// MotifRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MotifRegistryTransactorRaw struct {
	Contract *MotifRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMotifRegistry creates a new instance of MotifRegistry, bound to a specific deployed contract.
func NewMotifRegistry(address common.Address, backend bind.ContractBackend) (*MotifRegistry, error) {
	contract, err := bindMotifRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MotifRegistry{MotifRegistryCaller: MotifRegistryCaller{contract: contract}, MotifRegistryTransactor: MotifRegistryTransactor{contract: contract}, MotifRegistryFilterer: MotifRegistryFilterer{contract: contract}}, nil
}

// NewMotifRegistryCaller creates a new read-only instance of MotifRegistry, bound to a specific deployed contract.
func NewMotifRegistryCaller(address common.Address, caller bind.ContractCaller) (*MotifRegistryCaller, error) {
	contract, err := bindMotifRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MotifRegistryCaller{contract: contract}, nil
}

// NewMotifRegistryTransactor creates a new write-only instance of MotifRegistry, bound to a specific deployed contract.
func NewMotifRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*MotifRegistryTransactor, error) {
	contract, err := bindMotifRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MotifRegistryTransactor{contract: contract}, nil
}

// NewMotifRegistryFilterer creates a new log filterer instance of MotifRegistry, bound to a specific deployed contract.
func NewMotifRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*MotifRegistryFilterer, error) {
	contract, err := bindMotifRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MotifRegistryFilterer{contract: contract}, nil
}

// bindMotifRegistry binds a generic wrapper to an already deployed contract.
func bindMotifRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MotifRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MotifRegistry *MotifRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MotifRegistry.Contract.MotifRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MotifRegistry *MotifRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MotifRegistry.Contract.MotifRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MotifRegistry *MotifRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MotifRegistry.Contract.MotifRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MotifRegistry *MotifRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MotifRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MotifRegistry *MotifRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MotifRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MotifRegistry *MotifRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MotifRegistry.Contract.contract.Transact(opts, method, params...)
}

// GetLastCheckpointOperatorWeight is a free data retrieval call binding the contract method 0x3b242e4a.
//
// Solidity: function getLastCheckpointOperatorWeight(address _operator) view returns(uint256)
func (_MotifRegistry *MotifRegistryCaller) GetLastCheckpointOperatorWeight(opts *bind.CallOpts, _operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getLastCheckpointOperatorWeight", _operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastCheckpointOperatorWeight is a free data retrieval call binding the contract method 0x3b242e4a.
//
// Solidity: function getLastCheckpointOperatorWeight(address _operator) view returns(uint256)
func (_MotifRegistry *MotifRegistrySession) GetLastCheckpointOperatorWeight(_operator common.Address) (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointOperatorWeight(&_MotifRegistry.CallOpts, _operator)
}

// GetLastCheckpointOperatorWeight is a free data retrieval call binding the contract method 0x3b242e4a.
//
// Solidity: function getLastCheckpointOperatorWeight(address _operator) view returns(uint256)
func (_MotifRegistry *MotifRegistryCallerSession) GetLastCheckpointOperatorWeight(_operator common.Address) (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointOperatorWeight(&_MotifRegistry.CallOpts, _operator)
}

// GetLastCheckpointThresholdWeight is a free data retrieval call binding the contract method 0xb933fa74.
//
// Solidity: function getLastCheckpointThresholdWeight() view returns(uint256)
func (_MotifRegistry *MotifRegistryCaller) GetLastCheckpointThresholdWeight(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getLastCheckpointThresholdWeight")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastCheckpointThresholdWeight is a free data retrieval call binding the contract method 0xb933fa74.
//
// Solidity: function getLastCheckpointThresholdWeight() view returns(uint256)
func (_MotifRegistry *MotifRegistrySession) GetLastCheckpointThresholdWeight() (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointThresholdWeight(&_MotifRegistry.CallOpts)
}

// GetLastCheckpointThresholdWeight is a free data retrieval call binding the contract method 0xb933fa74.
//
// Solidity: function getLastCheckpointThresholdWeight() view returns(uint256)
func (_MotifRegistry *MotifRegistryCallerSession) GetLastCheckpointThresholdWeight() (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointThresholdWeight(&_MotifRegistry.CallOpts)
}

// GetLastCheckpointThresholdWeightAtBlock is a free data retrieval call binding the contract method 0x1e4cd85e.
//
// Solidity: function getLastCheckpointThresholdWeightAtBlock(uint32 _blockNumber) view returns(uint256)
func (_MotifRegistry *MotifRegistryCaller) GetLastCheckpointThresholdWeightAtBlock(opts *bind.CallOpts, _blockNumber uint32) (*big.Int, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getLastCheckpointThresholdWeightAtBlock", _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastCheckpointThresholdWeightAtBlock is a free data retrieval call binding the contract method 0x1e4cd85e.
//
// Solidity: function getLastCheckpointThresholdWeightAtBlock(uint32 _blockNumber) view returns(uint256)
func (_MotifRegistry *MotifRegistrySession) GetLastCheckpointThresholdWeightAtBlock(_blockNumber uint32) (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointThresholdWeightAtBlock(&_MotifRegistry.CallOpts, _blockNumber)
}

// GetLastCheckpointThresholdWeightAtBlock is a free data retrieval call binding the contract method 0x1e4cd85e.
//
// Solidity: function getLastCheckpointThresholdWeightAtBlock(uint32 _blockNumber) view returns(uint256)
func (_MotifRegistry *MotifRegistryCallerSession) GetLastCheckpointThresholdWeightAtBlock(_blockNumber uint32) (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointThresholdWeightAtBlock(&_MotifRegistry.CallOpts, _blockNumber)
}

// GetLastCheckpointTotalWeight is a free data retrieval call binding the contract method 0x314f3a49.
//
// Solidity: function getLastCheckpointTotalWeight() view returns(uint256)
func (_MotifRegistry *MotifRegistryCaller) GetLastCheckpointTotalWeight(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getLastCheckpointTotalWeight")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastCheckpointTotalWeight is a free data retrieval call binding the contract method 0x314f3a49.
//
// Solidity: function getLastCheckpointTotalWeight() view returns(uint256)
func (_MotifRegistry *MotifRegistrySession) GetLastCheckpointTotalWeight() (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointTotalWeight(&_MotifRegistry.CallOpts)
}

// GetLastCheckpointTotalWeight is a free data retrieval call binding the contract method 0x314f3a49.
//
// Solidity: function getLastCheckpointTotalWeight() view returns(uint256)
func (_MotifRegistry *MotifRegistryCallerSession) GetLastCheckpointTotalWeight() (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointTotalWeight(&_MotifRegistry.CallOpts)
}

// GetLastCheckpointTotalWeightAtBlock is a free data retrieval call binding the contract method 0x0dba3394.
//
// Solidity: function getLastCheckpointTotalWeightAtBlock(uint32 _blockNumber) view returns(uint256)
func (_MotifRegistry *MotifRegistryCaller) GetLastCheckpointTotalWeightAtBlock(opts *bind.CallOpts, _blockNumber uint32) (*big.Int, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getLastCheckpointTotalWeightAtBlock", _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastCheckpointTotalWeightAtBlock is a free data retrieval call binding the contract method 0x0dba3394.
//
// Solidity: function getLastCheckpointTotalWeightAtBlock(uint32 _blockNumber) view returns(uint256)
func (_MotifRegistry *MotifRegistrySession) GetLastCheckpointTotalWeightAtBlock(_blockNumber uint32) (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointTotalWeightAtBlock(&_MotifRegistry.CallOpts, _blockNumber)
}

// GetLastCheckpointTotalWeightAtBlock is a free data retrieval call binding the contract method 0x0dba3394.
//
// Solidity: function getLastCheckpointTotalWeightAtBlock(uint32 _blockNumber) view returns(uint256)
func (_MotifRegistry *MotifRegistryCallerSession) GetLastCheckpointTotalWeightAtBlock(_blockNumber uint32) (*big.Int, error) {
	return _MotifRegistry.Contract.GetLastCheckpointTotalWeightAtBlock(&_MotifRegistry.CallOpts, _blockNumber)
}

// GetLastestOperatorSigningKey is a free data retrieval call binding the contract method 0xcdcd3581.
//
// Solidity: function getLastestOperatorSigningKey(address _operator) view returns(address)
func (_MotifRegistry *MotifRegistryCaller) GetLastestOperatorSigningKey(opts *bind.CallOpts, _operator common.Address) (common.Address, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getLastestOperatorSigningKey", _operator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLastestOperatorSigningKey is a free data retrieval call binding the contract method 0xcdcd3581.
//
// Solidity: function getLastestOperatorSigningKey(address _operator) view returns(address)
func (_MotifRegistry *MotifRegistrySession) GetLastestOperatorSigningKey(_operator common.Address) (common.Address, error) {
	return _MotifRegistry.Contract.GetLastestOperatorSigningKey(&_MotifRegistry.CallOpts, _operator)
}

// GetLastestOperatorSigningKey is a free data retrieval call binding the contract method 0xcdcd3581.
//
// Solidity: function getLastestOperatorSigningKey(address _operator) view returns(address)
func (_MotifRegistry *MotifRegistryCallerSession) GetLastestOperatorSigningKey(_operator common.Address) (common.Address, error) {
	return _MotifRegistry.Contract.GetLastestOperatorSigningKey(&_MotifRegistry.CallOpts, _operator)
}

// GetOperatorBtcPublicKey is a free data retrieval call binding the contract method 0x39c21827.
//
// Solidity: function getOperatorBtcPublicKey(address operator) view returns(bytes)
func (_MotifRegistry *MotifRegistryCaller) GetOperatorBtcPublicKey(opts *bind.CallOpts, operator common.Address) ([]byte, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getOperatorBtcPublicKey", operator)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetOperatorBtcPublicKey is a free data retrieval call binding the contract method 0x39c21827.
//
// Solidity: function getOperatorBtcPublicKey(address operator) view returns(bytes)
func (_MotifRegistry *MotifRegistrySession) GetOperatorBtcPublicKey(operator common.Address) ([]byte, error) {
	return _MotifRegistry.Contract.GetOperatorBtcPublicKey(&_MotifRegistry.CallOpts, operator)
}

// GetOperatorBtcPublicKey is a free data retrieval call binding the contract method 0x39c21827.
//
// Solidity: function getOperatorBtcPublicKey(address operator) view returns(bytes)
func (_MotifRegistry *MotifRegistryCallerSession) GetOperatorBtcPublicKey(operator common.Address) ([]byte, error) {
	return _MotifRegistry.Contract.GetOperatorBtcPublicKey(&_MotifRegistry.CallOpts, operator)
}

// GetOperatorSigningKeyAtBlock is a free data retrieval call binding the contract method 0x5e1042e8.
//
// Solidity: function getOperatorSigningKeyAtBlock(address _operator, uint256 _blockNumber) view returns(address)
func (_MotifRegistry *MotifRegistryCaller) GetOperatorSigningKeyAtBlock(opts *bind.CallOpts, _operator common.Address, _blockNumber *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getOperatorSigningKeyAtBlock", _operator, _blockNumber)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperatorSigningKeyAtBlock is a free data retrieval call binding the contract method 0x5e1042e8.
//
// Solidity: function getOperatorSigningKeyAtBlock(address _operator, uint256 _blockNumber) view returns(address)
func (_MotifRegistry *MotifRegistrySession) GetOperatorSigningKeyAtBlock(_operator common.Address, _blockNumber *big.Int) (common.Address, error) {
	return _MotifRegistry.Contract.GetOperatorSigningKeyAtBlock(&_MotifRegistry.CallOpts, _operator, _blockNumber)
}

// GetOperatorSigningKeyAtBlock is a free data retrieval call binding the contract method 0x5e1042e8.
//
// Solidity: function getOperatorSigningKeyAtBlock(address _operator, uint256 _blockNumber) view returns(address)
func (_MotifRegistry *MotifRegistryCallerSession) GetOperatorSigningKeyAtBlock(_operator common.Address, _blockNumber *big.Int) (common.Address, error) {
	return _MotifRegistry.Contract.GetOperatorSigningKeyAtBlock(&_MotifRegistry.CallOpts, _operator, _blockNumber)
}

// GetOperatorWeight is a free data retrieval call binding the contract method 0x98ec1ac9.
//
// Solidity: function getOperatorWeight(address _operator) view returns(uint256)
func (_MotifRegistry *MotifRegistryCaller) GetOperatorWeight(opts *bind.CallOpts, _operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getOperatorWeight", _operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOperatorWeight is a free data retrieval call binding the contract method 0x98ec1ac9.
//
// Solidity: function getOperatorWeight(address _operator) view returns(uint256)
func (_MotifRegistry *MotifRegistrySession) GetOperatorWeight(_operator common.Address) (*big.Int, error) {
	return _MotifRegistry.Contract.GetOperatorWeight(&_MotifRegistry.CallOpts, _operator)
}

// GetOperatorWeight is a free data retrieval call binding the contract method 0x98ec1ac9.
//
// Solidity: function getOperatorWeight(address _operator) view returns(uint256)
func (_MotifRegistry *MotifRegistryCallerSession) GetOperatorWeight(_operator common.Address) (*big.Int, error) {
	return _MotifRegistry.Contract.GetOperatorWeight(&_MotifRegistry.CallOpts, _operator)
}

// GetOperatorWeightAtBlock is a free data retrieval call binding the contract method 0x955f2d90.
//
// Solidity: function getOperatorWeightAtBlock(address _operator, uint32 _blockNumber) view returns(uint256)
func (_MotifRegistry *MotifRegistryCaller) GetOperatorWeightAtBlock(opts *bind.CallOpts, _operator common.Address, _blockNumber uint32) (*big.Int, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "getOperatorWeightAtBlock", _operator, _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOperatorWeightAtBlock is a free data retrieval call binding the contract method 0x955f2d90.
//
// Solidity: function getOperatorWeightAtBlock(address _operator, uint32 _blockNumber) view returns(uint256)
func (_MotifRegistry *MotifRegistrySession) GetOperatorWeightAtBlock(_operator common.Address, _blockNumber uint32) (*big.Int, error) {
	return _MotifRegistry.Contract.GetOperatorWeightAtBlock(&_MotifRegistry.CallOpts, _operator, _blockNumber)
}

// GetOperatorWeightAtBlock is a free data retrieval call binding the contract method 0x955f2d90.
//
// Solidity: function getOperatorWeightAtBlock(address _operator, uint32 _blockNumber) view returns(uint256)
func (_MotifRegistry *MotifRegistryCallerSession) GetOperatorWeightAtBlock(_operator common.Address, _blockNumber uint32) (*big.Int, error) {
	return _MotifRegistry.Contract.GetOperatorWeightAtBlock(&_MotifRegistry.CallOpts, _operator, _blockNumber)
}

// IsOperatorBtcKeyRegistered is a free data retrieval call binding the contract method 0xc8bc8723.
//
// Solidity: function isOperatorBtcKeyRegistered(address operator) view returns(bool)
func (_MotifRegistry *MotifRegistryCaller) IsOperatorBtcKeyRegistered(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "isOperatorBtcKeyRegistered", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOperatorBtcKeyRegistered is a free data retrieval call binding the contract method 0xc8bc8723.
//
// Solidity: function isOperatorBtcKeyRegistered(address operator) view returns(bool)
func (_MotifRegistry *MotifRegistrySession) IsOperatorBtcKeyRegistered(operator common.Address) (bool, error) {
	return _MotifRegistry.Contract.IsOperatorBtcKeyRegistered(&_MotifRegistry.CallOpts, operator)
}

// IsOperatorBtcKeyRegistered is a free data retrieval call binding the contract method 0xc8bc8723.
//
// Solidity: function isOperatorBtcKeyRegistered(address operator) view returns(bool)
func (_MotifRegistry *MotifRegistryCallerSession) IsOperatorBtcKeyRegistered(operator common.Address) (bool, error) {
	return _MotifRegistry.Contract.IsOperatorBtcKeyRegistered(&_MotifRegistry.CallOpts, operator)
}

// IsValidSignature is a free data retrieval call binding the contract method 0x1626ba7e.
//
// Solidity: function isValidSignature(bytes32 _dataHash, bytes _signatureData) view returns(bytes4)
func (_MotifRegistry *MotifRegistryCaller) IsValidSignature(opts *bind.CallOpts, _dataHash [32]byte, _signatureData []byte) ([4]byte, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "isValidSignature", _dataHash, _signatureData)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// IsValidSignature is a free data retrieval call binding the contract method 0x1626ba7e.
//
// Solidity: function isValidSignature(bytes32 _dataHash, bytes _signatureData) view returns(bytes4)
func (_MotifRegistry *MotifRegistrySession) IsValidSignature(_dataHash [32]byte, _signatureData []byte) ([4]byte, error) {
	return _MotifRegistry.Contract.IsValidSignature(&_MotifRegistry.CallOpts, _dataHash, _signatureData)
}

// IsValidSignature is a free data retrieval call binding the contract method 0x1626ba7e.
//
// Solidity: function isValidSignature(bytes32 _dataHash, bytes _signatureData) view returns(bytes4)
func (_MotifRegistry *MotifRegistryCallerSession) IsValidSignature(_dataHash [32]byte, _signatureData []byte) ([4]byte, error) {
	return _MotifRegistry.Contract.IsValidSignature(&_MotifRegistry.CallOpts, _dataHash, _signatureData)
}

// MinimumWeight is a free data retrieval call binding the contract method 0x40bf2fb7.
//
// Solidity: function minimumWeight() view returns(uint256)
func (_MotifRegistry *MotifRegistryCaller) MinimumWeight(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "minimumWeight")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumWeight is a free data retrieval call binding the contract method 0x40bf2fb7.
//
// Solidity: function minimumWeight() view returns(uint256)
func (_MotifRegistry *MotifRegistrySession) MinimumWeight() (*big.Int, error) {
	return _MotifRegistry.Contract.MinimumWeight(&_MotifRegistry.CallOpts)
}

// MinimumWeight is a free data retrieval call binding the contract method 0x40bf2fb7.
//
// Solidity: function minimumWeight() view returns(uint256)
func (_MotifRegistry *MotifRegistryCallerSession) MinimumWeight() (*big.Int, error) {
	return _MotifRegistry.Contract.MinimumWeight(&_MotifRegistry.CallOpts)
}

// OperatorRegistered is a free data retrieval call binding the contract method 0xec7fbb31.
//
// Solidity: function operatorRegistered(address _operator) view returns(bool)
func (_MotifRegistry *MotifRegistryCaller) OperatorRegistered(opts *bind.CallOpts, _operator common.Address) (bool, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "operatorRegistered", _operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OperatorRegistered is a free data retrieval call binding the contract method 0xec7fbb31.
//
// Solidity: function operatorRegistered(address _operator) view returns(bool)
func (_MotifRegistry *MotifRegistrySession) OperatorRegistered(_operator common.Address) (bool, error) {
	return _MotifRegistry.Contract.OperatorRegistered(&_MotifRegistry.CallOpts, _operator)
}

// OperatorRegistered is a free data retrieval call binding the contract method 0xec7fbb31.
//
// Solidity: function operatorRegistered(address _operator) view returns(bool)
func (_MotifRegistry *MotifRegistryCallerSession) OperatorRegistered(_operator common.Address) (bool, error) {
	return _MotifRegistry.Contract.OperatorRegistered(&_MotifRegistry.CallOpts, _operator)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MotifRegistry *MotifRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MotifRegistry *MotifRegistrySession) Owner() (common.Address, error) {
	return _MotifRegistry.Contract.Owner(&_MotifRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MotifRegistry *MotifRegistryCallerSession) Owner() (common.Address, error) {
	return _MotifRegistry.Contract.Owner(&_MotifRegistry.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MotifRegistry *MotifRegistryCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MotifRegistry *MotifRegistrySession) Paused() (bool, error) {
	return _MotifRegistry.Contract.Paused(&_MotifRegistry.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MotifRegistry *MotifRegistryCallerSession) Paused() (bool, error) {
	return _MotifRegistry.Contract.Paused(&_MotifRegistry.CallOpts)
}

// Quorum is a free data retrieval call binding the contract method 0x1703a018.
//
// Solidity: function quorum() view returns(((address,uint96)[]))
func (_MotifRegistry *MotifRegistryCaller) Quorum(opts *bind.CallOpts) (Quorum, error) {
	var out []interface{}
	err := _MotifRegistry.contract.Call(opts, &out, "quorum")

	if err != nil {
		return *new(Quorum), err
	}

	out0 := *abi.ConvertType(out[0], new(Quorum)).(*Quorum)

	return out0, err

}

// Quorum is a free data retrieval call binding the contract method 0x1703a018.
//
// Solidity: function quorum() view returns(((address,uint96)[]))
func (_MotifRegistry *MotifRegistrySession) Quorum() (Quorum, error) {
	return _MotifRegistry.Contract.Quorum(&_MotifRegistry.CallOpts)
}

// Quorum is a free data retrieval call binding the contract method 0x1703a018.
//
// Solidity: function quorum() view returns(((address,uint96)[]))
func (_MotifRegistry *MotifRegistryCallerSession) Quorum() (Quorum, error) {
	return _MotifRegistry.Contract.Quorum(&_MotifRegistry.CallOpts)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0x857dc190.
//
// Solidity: function deregisterOperator() returns()
func (_MotifRegistry *MotifRegistryTransactor) DeregisterOperator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "deregisterOperator")
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0x857dc190.
//
// Solidity: function deregisterOperator() returns()
func (_MotifRegistry *MotifRegistrySession) DeregisterOperator() (*types.Transaction, error) {
	return _MotifRegistry.Contract.DeregisterOperator(&_MotifRegistry.TransactOpts)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0x857dc190.
//
// Solidity: function deregisterOperator() returns()
func (_MotifRegistry *MotifRegistryTransactorSession) DeregisterOperator() (*types.Transaction, error) {
	return _MotifRegistry.Contract.DeregisterOperator(&_MotifRegistry.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xab118995.
//
// Solidity: function initialize(address _serviceManager, uint256 _thresholdWeight, ((address,uint96)[]) _quorum) returns()
func (_MotifRegistry *MotifRegistryTransactor) Initialize(opts *bind.TransactOpts, _serviceManager common.Address, _thresholdWeight *big.Int, _quorum Quorum) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "initialize", _serviceManager, _thresholdWeight, _quorum)
}

// Initialize is a paid mutator transaction binding the contract method 0xab118995.
//
// Solidity: function initialize(address _serviceManager, uint256 _thresholdWeight, ((address,uint96)[]) _quorum) returns()
func (_MotifRegistry *MotifRegistrySession) Initialize(_serviceManager common.Address, _thresholdWeight *big.Int, _quorum Quorum) (*types.Transaction, error) {
	return _MotifRegistry.Contract.Initialize(&_MotifRegistry.TransactOpts, _serviceManager, _thresholdWeight, _quorum)
}

// Initialize is a paid mutator transaction binding the contract method 0xab118995.
//
// Solidity: function initialize(address _serviceManager, uint256 _thresholdWeight, ((address,uint96)[]) _quorum) returns()
func (_MotifRegistry *MotifRegistryTransactorSession) Initialize(_serviceManager common.Address, _thresholdWeight *big.Int, _quorum Quorum) (*types.Transaction, error) {
	return _MotifRegistry.Contract.Initialize(&_MotifRegistry.TransactOpts, _serviceManager, _thresholdWeight, _quorum)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MotifRegistry *MotifRegistryTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MotifRegistry *MotifRegistrySession) Pause() (*types.Transaction, error) {
	return _MotifRegistry.Contract.Pause(&_MotifRegistry.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MotifRegistry *MotifRegistryTransactorSession) Pause() (*types.Transaction, error) {
	return _MotifRegistry.Contract.Pause(&_MotifRegistry.TransactOpts)
}

// RegisterOperatorWithSignature is a paid mutator transaction binding the contract method 0x44e058fe.
//
// Solidity: function registerOperatorWithSignature((bytes,bytes32,uint256) _operatorSignature, address _signingKey, bytes btcPublicKey) returns()
func (_MotifRegistry *MotifRegistryTransactor) RegisterOperatorWithSignature(opts *bind.TransactOpts, _operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry, _signingKey common.Address, btcPublicKey []byte) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "registerOperatorWithSignature", _operatorSignature, _signingKey, btcPublicKey)
}

// RegisterOperatorWithSignature is a paid mutator transaction binding the contract method 0x44e058fe.
//
// Solidity: function registerOperatorWithSignature((bytes,bytes32,uint256) _operatorSignature, address _signingKey, bytes btcPublicKey) returns()
func (_MotifRegistry *MotifRegistrySession) RegisterOperatorWithSignature(_operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry, _signingKey common.Address, btcPublicKey []byte) (*types.Transaction, error) {
	return _MotifRegistry.Contract.RegisterOperatorWithSignature(&_MotifRegistry.TransactOpts, _operatorSignature, _signingKey, btcPublicKey)
}

// RegisterOperatorWithSignature is a paid mutator transaction binding the contract method 0x44e058fe.
//
// Solidity: function registerOperatorWithSignature((bytes,bytes32,uint256) _operatorSignature, address _signingKey, bytes btcPublicKey) returns()
func (_MotifRegistry *MotifRegistryTransactorSession) RegisterOperatorWithSignature(_operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry, _signingKey common.Address, btcPublicKey []byte) (*types.Transaction, error) {
	return _MotifRegistry.Contract.RegisterOperatorWithSignature(&_MotifRegistry.TransactOpts, _operatorSignature, _signingKey, btcPublicKey)
}

// RegisterOperatorWithSignature0 is a paid mutator transaction binding the contract method 0xe03b645e.
//
// Solidity: function registerOperatorWithSignature() returns()
func (_MotifRegistry *MotifRegistryTransactor) RegisterOperatorWithSignature0(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "registerOperatorWithSignature0")
}

// RegisterOperatorWithSignature0 is a paid mutator transaction binding the contract method 0xe03b645e.
//
// Solidity: function registerOperatorWithSignature() returns()
func (_MotifRegistry *MotifRegistrySession) RegisterOperatorWithSignature0() (*types.Transaction, error) {
	return _MotifRegistry.Contract.RegisterOperatorWithSignature0(&_MotifRegistry.TransactOpts)
}

// RegisterOperatorWithSignature0 is a paid mutator transaction binding the contract method 0xe03b645e.
//
// Solidity: function registerOperatorWithSignature() returns()
func (_MotifRegistry *MotifRegistryTransactorSession) RegisterOperatorWithSignature0() (*types.Transaction, error) {
	return _MotifRegistry.Contract.RegisterOperatorWithSignature0(&_MotifRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MotifRegistry *MotifRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MotifRegistry *MotifRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _MotifRegistry.Contract.RenounceOwnership(&_MotifRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MotifRegistry *MotifRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _MotifRegistry.Contract.RenounceOwnership(&_MotifRegistry.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MotifRegistry *MotifRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MotifRegistry *MotifRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.TransferOwnership(&_MotifRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MotifRegistry *MotifRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.TransferOwnership(&_MotifRegistry.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MotifRegistry *MotifRegistryTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MotifRegistry *MotifRegistrySession) Unpause() (*types.Transaction, error) {
	return _MotifRegistry.Contract.Unpause(&_MotifRegistry.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MotifRegistry *MotifRegistryTransactorSession) Unpause() (*types.Transaction, error) {
	return _MotifRegistry.Contract.Unpause(&_MotifRegistry.TransactOpts)
}

// UpdateMinimumWeight is a paid mutator transaction binding the contract method 0x696255be.
//
// Solidity: function updateMinimumWeight(uint256 _newMinimumWeight, address[] _operators) returns()
func (_MotifRegistry *MotifRegistryTransactor) UpdateMinimumWeight(opts *bind.TransactOpts, _newMinimumWeight *big.Int, _operators []common.Address) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "updateMinimumWeight", _newMinimumWeight, _operators)
}

// UpdateMinimumWeight is a paid mutator transaction binding the contract method 0x696255be.
//
// Solidity: function updateMinimumWeight(uint256 _newMinimumWeight, address[] _operators) returns()
func (_MotifRegistry *MotifRegistrySession) UpdateMinimumWeight(_newMinimumWeight *big.Int, _operators []common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateMinimumWeight(&_MotifRegistry.TransactOpts, _newMinimumWeight, _operators)
}

// UpdateMinimumWeight is a paid mutator transaction binding the contract method 0x696255be.
//
// Solidity: function updateMinimumWeight(uint256 _newMinimumWeight, address[] _operators) returns()
func (_MotifRegistry *MotifRegistryTransactorSession) UpdateMinimumWeight(_newMinimumWeight *big.Int, _operators []common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateMinimumWeight(&_MotifRegistry.TransactOpts, _newMinimumWeight, _operators)
}

// UpdateOperatorSigningKey is a paid mutator transaction binding the contract method 0x743c31f4.
//
// Solidity: function updateOperatorSigningKey(address _newSigningKey) returns()
func (_MotifRegistry *MotifRegistryTransactor) UpdateOperatorSigningKey(opts *bind.TransactOpts, _newSigningKey common.Address) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "updateOperatorSigningKey", _newSigningKey)
}

// UpdateOperatorSigningKey is a paid mutator transaction binding the contract method 0x743c31f4.
//
// Solidity: function updateOperatorSigningKey(address _newSigningKey) returns()
func (_MotifRegistry *MotifRegistrySession) UpdateOperatorSigningKey(_newSigningKey common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateOperatorSigningKey(&_MotifRegistry.TransactOpts, _newSigningKey)
}

// UpdateOperatorSigningKey is a paid mutator transaction binding the contract method 0x743c31f4.
//
// Solidity: function updateOperatorSigningKey(address _newSigningKey) returns()
func (_MotifRegistry *MotifRegistryTransactorSession) UpdateOperatorSigningKey(_newSigningKey common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateOperatorSigningKey(&_MotifRegistry.TransactOpts, _newSigningKey)
}

// UpdateOperators is a paid mutator transaction binding the contract method 0x00cf2ab5.
//
// Solidity: function updateOperators(address[] _operators) returns()
func (_MotifRegistry *MotifRegistryTransactor) UpdateOperators(opts *bind.TransactOpts, _operators []common.Address) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "updateOperators", _operators)
}

// UpdateOperators is a paid mutator transaction binding the contract method 0x00cf2ab5.
//
// Solidity: function updateOperators(address[] _operators) returns()
func (_MotifRegistry *MotifRegistrySession) UpdateOperators(_operators []common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateOperators(&_MotifRegistry.TransactOpts, _operators)
}

// UpdateOperators is a paid mutator transaction binding the contract method 0x00cf2ab5.
//
// Solidity: function updateOperators(address[] _operators) returns()
func (_MotifRegistry *MotifRegistryTransactorSession) UpdateOperators(_operators []common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateOperators(&_MotifRegistry.TransactOpts, _operators)
}

// UpdateOperatorsForQuorum is a paid mutator transaction binding the contract method 0x5140a548.
//
// Solidity: function updateOperatorsForQuorum(address[][] operatorsPerQuorum, bytes ) returns()
func (_MotifRegistry *MotifRegistryTransactor) UpdateOperatorsForQuorum(opts *bind.TransactOpts, operatorsPerQuorum [][]common.Address, arg1 []byte) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "updateOperatorsForQuorum", operatorsPerQuorum, arg1)
}

// UpdateOperatorsForQuorum is a paid mutator transaction binding the contract method 0x5140a548.
//
// Solidity: function updateOperatorsForQuorum(address[][] operatorsPerQuorum, bytes ) returns()
func (_MotifRegistry *MotifRegistrySession) UpdateOperatorsForQuorum(operatorsPerQuorum [][]common.Address, arg1 []byte) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateOperatorsForQuorum(&_MotifRegistry.TransactOpts, operatorsPerQuorum, arg1)
}

// UpdateOperatorsForQuorum is a paid mutator transaction binding the contract method 0x5140a548.
//
// Solidity: function updateOperatorsForQuorum(address[][] operatorsPerQuorum, bytes ) returns()
func (_MotifRegistry *MotifRegistryTransactorSession) UpdateOperatorsForQuorum(operatorsPerQuorum [][]common.Address, arg1 []byte) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateOperatorsForQuorum(&_MotifRegistry.TransactOpts, operatorsPerQuorum, arg1)
}

// UpdateQuorumConfig is a paid mutator transaction binding the contract method 0xdec5d1f6.
//
// Solidity: function updateQuorumConfig(((address,uint96)[]) _quorum, address[] _operators) returns()
func (_MotifRegistry *MotifRegistryTransactor) UpdateQuorumConfig(opts *bind.TransactOpts, _quorum Quorum, _operators []common.Address) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "updateQuorumConfig", _quorum, _operators)
}

// UpdateQuorumConfig is a paid mutator transaction binding the contract method 0xdec5d1f6.
//
// Solidity: function updateQuorumConfig(((address,uint96)[]) _quorum, address[] _operators) returns()
func (_MotifRegistry *MotifRegistrySession) UpdateQuorumConfig(_quorum Quorum, _operators []common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateQuorumConfig(&_MotifRegistry.TransactOpts, _quorum, _operators)
}

// UpdateQuorumConfig is a paid mutator transaction binding the contract method 0xdec5d1f6.
//
// Solidity: function updateQuorumConfig(((address,uint96)[]) _quorum, address[] _operators) returns()
func (_MotifRegistry *MotifRegistryTransactorSession) UpdateQuorumConfig(_quorum Quorum, _operators []common.Address) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateQuorumConfig(&_MotifRegistry.TransactOpts, _quorum, _operators)
}

// UpdateStakeThreshold is a paid mutator transaction binding the contract method 0x5ef53329.
//
// Solidity: function updateStakeThreshold(uint256 _thresholdWeight) returns()
func (_MotifRegistry *MotifRegistryTransactor) UpdateStakeThreshold(opts *bind.TransactOpts, _thresholdWeight *big.Int) (*types.Transaction, error) {
	return _MotifRegistry.contract.Transact(opts, "updateStakeThreshold", _thresholdWeight)
}

// UpdateStakeThreshold is a paid mutator transaction binding the contract method 0x5ef53329.
//
// Solidity: function updateStakeThreshold(uint256 _thresholdWeight) returns()
func (_MotifRegistry *MotifRegistrySession) UpdateStakeThreshold(_thresholdWeight *big.Int) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateStakeThreshold(&_MotifRegistry.TransactOpts, _thresholdWeight)
}

// UpdateStakeThreshold is a paid mutator transaction binding the contract method 0x5ef53329.
//
// Solidity: function updateStakeThreshold(uint256 _thresholdWeight) returns()
func (_MotifRegistry *MotifRegistryTransactorSession) UpdateStakeThreshold(_thresholdWeight *big.Int) (*types.Transaction, error) {
	return _MotifRegistry.Contract.UpdateStakeThreshold(&_MotifRegistry.TransactOpts, _thresholdWeight)
}

// MotifRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the MotifRegistry contract.
type MotifRegistryInitializedIterator struct {
	Event *MotifRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryInitialized represents a Initialized event raised by the MotifRegistry contract.
type MotifRegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MotifRegistry *MotifRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*MotifRegistryInitializedIterator, error) {

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &MotifRegistryInitializedIterator{contract: _MotifRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MotifRegistry *MotifRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *MotifRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryInitialized)
				if err := _MotifRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MotifRegistry *MotifRegistryFilterer) ParseInitialized(log types.Log) (*MotifRegistryInitialized, error) {
	event := new(MotifRegistryInitialized)
	if err := _MotifRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryMinimumWeightUpdatedIterator is returned from FilterMinimumWeightUpdated and is used to iterate over the raw logs and unpacked data for MinimumWeightUpdated events raised by the MotifRegistry contract.
type MotifRegistryMinimumWeightUpdatedIterator struct {
	Event *MotifRegistryMinimumWeightUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryMinimumWeightUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryMinimumWeightUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryMinimumWeightUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryMinimumWeightUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryMinimumWeightUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryMinimumWeightUpdated represents a MinimumWeightUpdated event raised by the MotifRegistry contract.
type MotifRegistryMinimumWeightUpdated struct {
	Old *big.Int
	New *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMinimumWeightUpdated is a free log retrieval operation binding the contract event 0x713ca53b88d6eb63f5b1854cb8cbdd736ec51eda225e46791aa9298b0160648f.
//
// Solidity: event MinimumWeightUpdated(uint256 _old, uint256 _new)
func (_MotifRegistry *MotifRegistryFilterer) FilterMinimumWeightUpdated(opts *bind.FilterOpts) (*MotifRegistryMinimumWeightUpdatedIterator, error) {

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "MinimumWeightUpdated")
	if err != nil {
		return nil, err
	}
	return &MotifRegistryMinimumWeightUpdatedIterator{contract: _MotifRegistry.contract, event: "MinimumWeightUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumWeightUpdated is a free log subscription operation binding the contract event 0x713ca53b88d6eb63f5b1854cb8cbdd736ec51eda225e46791aa9298b0160648f.
//
// Solidity: event MinimumWeightUpdated(uint256 _old, uint256 _new)
func (_MotifRegistry *MotifRegistryFilterer) WatchMinimumWeightUpdated(opts *bind.WatchOpts, sink chan<- *MotifRegistryMinimumWeightUpdated) (event.Subscription, error) {

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "MinimumWeightUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryMinimumWeightUpdated)
				if err := _MotifRegistry.contract.UnpackLog(event, "MinimumWeightUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumWeightUpdated is a log parse operation binding the contract event 0x713ca53b88d6eb63f5b1854cb8cbdd736ec51eda225e46791aa9298b0160648f.
//
// Solidity: event MinimumWeightUpdated(uint256 _old, uint256 _new)
func (_MotifRegistry *MotifRegistryFilterer) ParseMinimumWeightUpdated(log types.Log) (*MotifRegistryMinimumWeightUpdated, error) {
	event := new(MotifRegistryMinimumWeightUpdated)
	if err := _MotifRegistry.contract.UnpackLog(event, "MinimumWeightUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryOperatorBtcKeyRegisteredIterator is returned from FilterOperatorBtcKeyRegistered and is used to iterate over the raw logs and unpacked data for OperatorBtcKeyRegistered events raised by the MotifRegistry contract.
type MotifRegistryOperatorBtcKeyRegisteredIterator struct {
	Event *MotifRegistryOperatorBtcKeyRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryOperatorBtcKeyRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryOperatorBtcKeyRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryOperatorBtcKeyRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryOperatorBtcKeyRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryOperatorBtcKeyRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryOperatorBtcKeyRegistered represents a OperatorBtcKeyRegistered event raised by the MotifRegistry contract.
type MotifRegistryOperatorBtcKeyRegistered struct {
	Operator     common.Address
	BtcPublicKey []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterOperatorBtcKeyRegistered is a free log retrieval operation binding the contract event 0x0d8984808ea8788ea495935f77731d3f13c887a86c455c961aed095335c76bd8.
//
// Solidity: event OperatorBtcKeyRegistered(address indexed operator, bytes btcPublicKey)
func (_MotifRegistry *MotifRegistryFilterer) FilterOperatorBtcKeyRegistered(opts *bind.FilterOpts, operator []common.Address) (*MotifRegistryOperatorBtcKeyRegisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "OperatorBtcKeyRegistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return &MotifRegistryOperatorBtcKeyRegisteredIterator{contract: _MotifRegistry.contract, event: "OperatorBtcKeyRegistered", logs: logs, sub: sub}, nil
}

// WatchOperatorBtcKeyRegistered is a free log subscription operation binding the contract event 0x0d8984808ea8788ea495935f77731d3f13c887a86c455c961aed095335c76bd8.
//
// Solidity: event OperatorBtcKeyRegistered(address indexed operator, bytes btcPublicKey)
func (_MotifRegistry *MotifRegistryFilterer) WatchOperatorBtcKeyRegistered(opts *bind.WatchOpts, sink chan<- *MotifRegistryOperatorBtcKeyRegistered, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "OperatorBtcKeyRegistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryOperatorBtcKeyRegistered)
				if err := _MotifRegistry.contract.UnpackLog(event, "OperatorBtcKeyRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorBtcKeyRegistered is a log parse operation binding the contract event 0x0d8984808ea8788ea495935f77731d3f13c887a86c455c961aed095335c76bd8.
//
// Solidity: event OperatorBtcKeyRegistered(address indexed operator, bytes btcPublicKey)
func (_MotifRegistry *MotifRegistryFilterer) ParseOperatorBtcKeyRegistered(log types.Log) (*MotifRegistryOperatorBtcKeyRegistered, error) {
	event := new(MotifRegistryOperatorBtcKeyRegistered)
	if err := _MotifRegistry.contract.UnpackLog(event, "OperatorBtcKeyRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryOperatorBtckeyDeregisteredIterator is returned from FilterOperatorBtckeyDeregistered and is used to iterate over the raw logs and unpacked data for OperatorBtckeyDeregistered events raised by the MotifRegistry contract.
type MotifRegistryOperatorBtckeyDeregisteredIterator struct {
	Event *MotifRegistryOperatorBtckeyDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryOperatorBtckeyDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryOperatorBtckeyDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryOperatorBtckeyDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryOperatorBtckeyDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryOperatorBtckeyDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryOperatorBtckeyDeregistered represents a OperatorBtckeyDeregistered event raised by the MotifRegistry contract.
type MotifRegistryOperatorBtckeyDeregistered struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorBtckeyDeregistered is a free log retrieval operation binding the contract event 0x230c2882fff3e13c75d0036d8cca217e2c2a8c0b330b704f5aa2203c21f43d5c.
//
// Solidity: event OperatorBtckeyDeregistered(address indexed operator)
func (_MotifRegistry *MotifRegistryFilterer) FilterOperatorBtckeyDeregistered(opts *bind.FilterOpts, operator []common.Address) (*MotifRegistryOperatorBtckeyDeregisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "OperatorBtckeyDeregistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return &MotifRegistryOperatorBtckeyDeregisteredIterator{contract: _MotifRegistry.contract, event: "OperatorBtckeyDeregistered", logs: logs, sub: sub}, nil
}

// WatchOperatorBtckeyDeregistered is a free log subscription operation binding the contract event 0x230c2882fff3e13c75d0036d8cca217e2c2a8c0b330b704f5aa2203c21f43d5c.
//
// Solidity: event OperatorBtckeyDeregistered(address indexed operator)
func (_MotifRegistry *MotifRegistryFilterer) WatchOperatorBtckeyDeregistered(opts *bind.WatchOpts, sink chan<- *MotifRegistryOperatorBtckeyDeregistered, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "OperatorBtckeyDeregistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryOperatorBtckeyDeregistered)
				if err := _MotifRegistry.contract.UnpackLog(event, "OperatorBtckeyDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorBtckeyDeregistered is a log parse operation binding the contract event 0x230c2882fff3e13c75d0036d8cca217e2c2a8c0b330b704f5aa2203c21f43d5c.
//
// Solidity: event OperatorBtckeyDeregistered(address indexed operator)
func (_MotifRegistry *MotifRegistryFilterer) ParseOperatorBtckeyDeregistered(log types.Log) (*MotifRegistryOperatorBtckeyDeregistered, error) {
	event := new(MotifRegistryOperatorBtckeyDeregistered)
	if err := _MotifRegistry.contract.UnpackLog(event, "OperatorBtckeyDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryOperatorDeregisteredIterator is returned from FilterOperatorDeregistered and is used to iterate over the raw logs and unpacked data for OperatorDeregistered events raised by the MotifRegistry contract.
type MotifRegistryOperatorDeregisteredIterator struct {
	Event *MotifRegistryOperatorDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryOperatorDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryOperatorDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryOperatorDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryOperatorDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryOperatorDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryOperatorDeregistered represents a OperatorDeregistered event raised by the MotifRegistry contract.
type MotifRegistryOperatorDeregistered struct {
	Operator common.Address
	Avs      common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorDeregistered is a free log retrieval operation binding the contract event 0x31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed580.
//
// Solidity: event OperatorDeregistered(address indexed _operator, address indexed _avs)
func (_MotifRegistry *MotifRegistryFilterer) FilterOperatorDeregistered(opts *bind.FilterOpts, _operator []common.Address, _avs []common.Address) (*MotifRegistryOperatorDeregisteredIterator, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}
	var _avsRule []interface{}
	for _, _avsItem := range _avs {
		_avsRule = append(_avsRule, _avsItem)
	}

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "OperatorDeregistered", _operatorRule, _avsRule)
	if err != nil {
		return nil, err
	}
	return &MotifRegistryOperatorDeregisteredIterator{contract: _MotifRegistry.contract, event: "OperatorDeregistered", logs: logs, sub: sub}, nil
}

// WatchOperatorDeregistered is a free log subscription operation binding the contract event 0x31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed580.
//
// Solidity: event OperatorDeregistered(address indexed _operator, address indexed _avs)
func (_MotifRegistry *MotifRegistryFilterer) WatchOperatorDeregistered(opts *bind.WatchOpts, sink chan<- *MotifRegistryOperatorDeregistered, _operator []common.Address, _avs []common.Address) (event.Subscription, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}
	var _avsRule []interface{}
	for _, _avsItem := range _avs {
		_avsRule = append(_avsRule, _avsItem)
	}

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "OperatorDeregistered", _operatorRule, _avsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryOperatorDeregistered)
				if err := _MotifRegistry.contract.UnpackLog(event, "OperatorDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorDeregistered is a log parse operation binding the contract event 0x31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed580.
//
// Solidity: event OperatorDeregistered(address indexed _operator, address indexed _avs)
func (_MotifRegistry *MotifRegistryFilterer) ParseOperatorDeregistered(log types.Log) (*MotifRegistryOperatorDeregistered, error) {
	event := new(MotifRegistryOperatorDeregistered)
	if err := _MotifRegistry.contract.UnpackLog(event, "OperatorDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryOperatorRegisteredIterator is returned from FilterOperatorRegistered and is used to iterate over the raw logs and unpacked data for OperatorRegistered events raised by the MotifRegistry contract.
type MotifRegistryOperatorRegisteredIterator struct {
	Event *MotifRegistryOperatorRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryOperatorRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryOperatorRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryOperatorRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryOperatorRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryOperatorRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryOperatorRegistered represents a OperatorRegistered event raised by the MotifRegistry contract.
type MotifRegistryOperatorRegistered struct {
	Operator common.Address
	Avs      common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorRegistered is a free log retrieval operation binding the contract event 0xa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c1.
//
// Solidity: event OperatorRegistered(address indexed _operator, address indexed _avs)
func (_MotifRegistry *MotifRegistryFilterer) FilterOperatorRegistered(opts *bind.FilterOpts, _operator []common.Address, _avs []common.Address) (*MotifRegistryOperatorRegisteredIterator, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}
	var _avsRule []interface{}
	for _, _avsItem := range _avs {
		_avsRule = append(_avsRule, _avsItem)
	}

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "OperatorRegistered", _operatorRule, _avsRule)
	if err != nil {
		return nil, err
	}
	return &MotifRegistryOperatorRegisteredIterator{contract: _MotifRegistry.contract, event: "OperatorRegistered", logs: logs, sub: sub}, nil
}

// WatchOperatorRegistered is a free log subscription operation binding the contract event 0xa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c1.
//
// Solidity: event OperatorRegistered(address indexed _operator, address indexed _avs)
func (_MotifRegistry *MotifRegistryFilterer) WatchOperatorRegistered(opts *bind.WatchOpts, sink chan<- *MotifRegistryOperatorRegistered, _operator []common.Address, _avs []common.Address) (event.Subscription, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}
	var _avsRule []interface{}
	for _, _avsItem := range _avs {
		_avsRule = append(_avsRule, _avsItem)
	}

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "OperatorRegistered", _operatorRule, _avsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryOperatorRegistered)
				if err := _MotifRegistry.contract.UnpackLog(event, "OperatorRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRegistered is a log parse operation binding the contract event 0xa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c1.
//
// Solidity: event OperatorRegistered(address indexed _operator, address indexed _avs)
func (_MotifRegistry *MotifRegistryFilterer) ParseOperatorRegistered(log types.Log) (*MotifRegistryOperatorRegistered, error) {
	event := new(MotifRegistryOperatorRegistered)
	if err := _MotifRegistry.contract.UnpackLog(event, "OperatorRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryOperatorWeightUpdatedIterator is returned from FilterOperatorWeightUpdated and is used to iterate over the raw logs and unpacked data for OperatorWeightUpdated events raised by the MotifRegistry contract.
type MotifRegistryOperatorWeightUpdatedIterator struct {
	Event *MotifRegistryOperatorWeightUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryOperatorWeightUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryOperatorWeightUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryOperatorWeightUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryOperatorWeightUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryOperatorWeightUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryOperatorWeightUpdated represents a OperatorWeightUpdated event raised by the MotifRegistry contract.
type MotifRegistryOperatorWeightUpdated struct {
	Operator  common.Address
	OldWeight *big.Int
	NewWeight *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOperatorWeightUpdated is a free log retrieval operation binding the contract event 0x88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe594.
//
// Solidity: event OperatorWeightUpdated(address indexed _operator, uint256 oldWeight, uint256 newWeight)
func (_MotifRegistry *MotifRegistryFilterer) FilterOperatorWeightUpdated(opts *bind.FilterOpts, _operator []common.Address) (*MotifRegistryOperatorWeightUpdatedIterator, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "OperatorWeightUpdated", _operatorRule)
	if err != nil {
		return nil, err
	}
	return &MotifRegistryOperatorWeightUpdatedIterator{contract: _MotifRegistry.contract, event: "OperatorWeightUpdated", logs: logs, sub: sub}, nil
}

// WatchOperatorWeightUpdated is a free log subscription operation binding the contract event 0x88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe594.
//
// Solidity: event OperatorWeightUpdated(address indexed _operator, uint256 oldWeight, uint256 newWeight)
func (_MotifRegistry *MotifRegistryFilterer) WatchOperatorWeightUpdated(opts *bind.WatchOpts, sink chan<- *MotifRegistryOperatorWeightUpdated, _operator []common.Address) (event.Subscription, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "OperatorWeightUpdated", _operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryOperatorWeightUpdated)
				if err := _MotifRegistry.contract.UnpackLog(event, "OperatorWeightUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorWeightUpdated is a log parse operation binding the contract event 0x88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe594.
//
// Solidity: event OperatorWeightUpdated(address indexed _operator, uint256 oldWeight, uint256 newWeight)
func (_MotifRegistry *MotifRegistryFilterer) ParseOperatorWeightUpdated(log types.Log) (*MotifRegistryOperatorWeightUpdated, error) {
	event := new(MotifRegistryOperatorWeightUpdated)
	if err := _MotifRegistry.contract.UnpackLog(event, "OperatorWeightUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the MotifRegistry contract.
type MotifRegistryOwnershipTransferredIterator struct {
	Event *MotifRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the MotifRegistry contract.
type MotifRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MotifRegistry *MotifRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MotifRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MotifRegistryOwnershipTransferredIterator{contract: _MotifRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MotifRegistry *MotifRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MotifRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryOwnershipTransferred)
				if err := _MotifRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MotifRegistry *MotifRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*MotifRegistryOwnershipTransferred, error) {
	event := new(MotifRegistryOwnershipTransferred)
	if err := _MotifRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the MotifRegistry contract.
type MotifRegistryPausedIterator struct {
	Event *MotifRegistryPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryPaused represents a Paused event raised by the MotifRegistry contract.
type MotifRegistryPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MotifRegistry *MotifRegistryFilterer) FilterPaused(opts *bind.FilterOpts) (*MotifRegistryPausedIterator, error) {

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &MotifRegistryPausedIterator{contract: _MotifRegistry.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MotifRegistry *MotifRegistryFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *MotifRegistryPaused) (event.Subscription, error) {

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryPaused)
				if err := _MotifRegistry.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MotifRegistry *MotifRegistryFilterer) ParsePaused(log types.Log) (*MotifRegistryPaused, error) {
	event := new(MotifRegistryPaused)
	if err := _MotifRegistry.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryQuorumUpdatedIterator is returned from FilterQuorumUpdated and is used to iterate over the raw logs and unpacked data for QuorumUpdated events raised by the MotifRegistry contract.
type MotifRegistryQuorumUpdatedIterator struct {
	Event *MotifRegistryQuorumUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryQuorumUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryQuorumUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryQuorumUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryQuorumUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryQuorumUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryQuorumUpdated represents a QuorumUpdated event raised by the MotifRegistry contract.
type MotifRegistryQuorumUpdated struct {
	Old Quorum
	New Quorum
	Raw types.Log // Blockchain specific contextual infos
}

// FilterQuorumUpdated is a free log retrieval operation binding the contract event 0x23aad4e61744ece164130aa415c1616e80136b0f0770e56589438b90b269265e.
//
// Solidity: event QuorumUpdated(((address,uint96)[]) _old, ((address,uint96)[]) _new)
func (_MotifRegistry *MotifRegistryFilterer) FilterQuorumUpdated(opts *bind.FilterOpts) (*MotifRegistryQuorumUpdatedIterator, error) {

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "QuorumUpdated")
	if err != nil {
		return nil, err
	}
	return &MotifRegistryQuorumUpdatedIterator{contract: _MotifRegistry.contract, event: "QuorumUpdated", logs: logs, sub: sub}, nil
}

// WatchQuorumUpdated is a free log subscription operation binding the contract event 0x23aad4e61744ece164130aa415c1616e80136b0f0770e56589438b90b269265e.
//
// Solidity: event QuorumUpdated(((address,uint96)[]) _old, ((address,uint96)[]) _new)
func (_MotifRegistry *MotifRegistryFilterer) WatchQuorumUpdated(opts *bind.WatchOpts, sink chan<- *MotifRegistryQuorumUpdated) (event.Subscription, error) {

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "QuorumUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryQuorumUpdated)
				if err := _MotifRegistry.contract.UnpackLog(event, "QuorumUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuorumUpdated is a log parse operation binding the contract event 0x23aad4e61744ece164130aa415c1616e80136b0f0770e56589438b90b269265e.
//
// Solidity: event QuorumUpdated(((address,uint96)[]) _old, ((address,uint96)[]) _new)
func (_MotifRegistry *MotifRegistryFilterer) ParseQuorumUpdated(log types.Log) (*MotifRegistryQuorumUpdated, error) {
	event := new(MotifRegistryQuorumUpdated)
	if err := _MotifRegistry.contract.UnpackLog(event, "QuorumUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistrySigningKeyUpdateIterator is returned from FilterSigningKeyUpdate and is used to iterate over the raw logs and unpacked data for SigningKeyUpdate events raised by the MotifRegistry contract.
type MotifRegistrySigningKeyUpdateIterator struct {
	Event *MotifRegistrySigningKeyUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistrySigningKeyUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistrySigningKeyUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistrySigningKeyUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistrySigningKeyUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistrySigningKeyUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistrySigningKeyUpdate represents a SigningKeyUpdate event raised by the MotifRegistry contract.
type MotifRegistrySigningKeyUpdate struct {
	Operator      common.Address
	UpdateBlock   *big.Int
	NewSigningKey common.Address
	OldSigningKey common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSigningKeyUpdate is a free log retrieval operation binding the contract event 0xd061168252f441733658f09e4d8f5b2d998ed4ef24a2bbfd6ceca52ea1315002.
//
// Solidity: event SigningKeyUpdate(address indexed operator, uint256 indexed updateBlock, address indexed newSigningKey, address oldSigningKey)
func (_MotifRegistry *MotifRegistryFilterer) FilterSigningKeyUpdate(opts *bind.FilterOpts, operator []common.Address, updateBlock []*big.Int, newSigningKey []common.Address) (*MotifRegistrySigningKeyUpdateIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var updateBlockRule []interface{}
	for _, updateBlockItem := range updateBlock {
		updateBlockRule = append(updateBlockRule, updateBlockItem)
	}
	var newSigningKeyRule []interface{}
	for _, newSigningKeyItem := range newSigningKey {
		newSigningKeyRule = append(newSigningKeyRule, newSigningKeyItem)
	}

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "SigningKeyUpdate", operatorRule, updateBlockRule, newSigningKeyRule)
	if err != nil {
		return nil, err
	}
	return &MotifRegistrySigningKeyUpdateIterator{contract: _MotifRegistry.contract, event: "SigningKeyUpdate", logs: logs, sub: sub}, nil
}

// WatchSigningKeyUpdate is a free log subscription operation binding the contract event 0xd061168252f441733658f09e4d8f5b2d998ed4ef24a2bbfd6ceca52ea1315002.
//
// Solidity: event SigningKeyUpdate(address indexed operator, uint256 indexed updateBlock, address indexed newSigningKey, address oldSigningKey)
func (_MotifRegistry *MotifRegistryFilterer) WatchSigningKeyUpdate(opts *bind.WatchOpts, sink chan<- *MotifRegistrySigningKeyUpdate, operator []common.Address, updateBlock []*big.Int, newSigningKey []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var updateBlockRule []interface{}
	for _, updateBlockItem := range updateBlock {
		updateBlockRule = append(updateBlockRule, updateBlockItem)
	}
	var newSigningKeyRule []interface{}
	for _, newSigningKeyItem := range newSigningKey {
		newSigningKeyRule = append(newSigningKeyRule, newSigningKeyItem)
	}

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "SigningKeyUpdate", operatorRule, updateBlockRule, newSigningKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistrySigningKeyUpdate)
				if err := _MotifRegistry.contract.UnpackLog(event, "SigningKeyUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSigningKeyUpdate is a log parse operation binding the contract event 0xd061168252f441733658f09e4d8f5b2d998ed4ef24a2bbfd6ceca52ea1315002.
//
// Solidity: event SigningKeyUpdate(address indexed operator, uint256 indexed updateBlock, address indexed newSigningKey, address oldSigningKey)
func (_MotifRegistry *MotifRegistryFilterer) ParseSigningKeyUpdate(log types.Log) (*MotifRegistrySigningKeyUpdate, error) {
	event := new(MotifRegistrySigningKeyUpdate)
	if err := _MotifRegistry.contract.UnpackLog(event, "SigningKeyUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryThresholdWeightUpdatedIterator is returned from FilterThresholdWeightUpdated and is used to iterate over the raw logs and unpacked data for ThresholdWeightUpdated events raised by the MotifRegistry contract.
type MotifRegistryThresholdWeightUpdatedIterator struct {
	Event *MotifRegistryThresholdWeightUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryThresholdWeightUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryThresholdWeightUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryThresholdWeightUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryThresholdWeightUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryThresholdWeightUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryThresholdWeightUpdated represents a ThresholdWeightUpdated event raised by the MotifRegistry contract.
type MotifRegistryThresholdWeightUpdated struct {
	ThresholdWeight *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterThresholdWeightUpdated is a free log retrieval operation binding the contract event 0x9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b.
//
// Solidity: event ThresholdWeightUpdated(uint256 _thresholdWeight)
func (_MotifRegistry *MotifRegistryFilterer) FilterThresholdWeightUpdated(opts *bind.FilterOpts) (*MotifRegistryThresholdWeightUpdatedIterator, error) {

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "ThresholdWeightUpdated")
	if err != nil {
		return nil, err
	}
	return &MotifRegistryThresholdWeightUpdatedIterator{contract: _MotifRegistry.contract, event: "ThresholdWeightUpdated", logs: logs, sub: sub}, nil
}

// WatchThresholdWeightUpdated is a free log subscription operation binding the contract event 0x9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b.
//
// Solidity: event ThresholdWeightUpdated(uint256 _thresholdWeight)
func (_MotifRegistry *MotifRegistryFilterer) WatchThresholdWeightUpdated(opts *bind.WatchOpts, sink chan<- *MotifRegistryThresholdWeightUpdated) (event.Subscription, error) {

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "ThresholdWeightUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryThresholdWeightUpdated)
				if err := _MotifRegistry.contract.UnpackLog(event, "ThresholdWeightUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThresholdWeightUpdated is a log parse operation binding the contract event 0x9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b.
//
// Solidity: event ThresholdWeightUpdated(uint256 _thresholdWeight)
func (_MotifRegistry *MotifRegistryFilterer) ParseThresholdWeightUpdated(log types.Log) (*MotifRegistryThresholdWeightUpdated, error) {
	event := new(MotifRegistryThresholdWeightUpdated)
	if err := _MotifRegistry.contract.UnpackLog(event, "ThresholdWeightUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryTotalWeightUpdatedIterator is returned from FilterTotalWeightUpdated and is used to iterate over the raw logs and unpacked data for TotalWeightUpdated events raised by the MotifRegistry contract.
type MotifRegistryTotalWeightUpdatedIterator struct {
	Event *MotifRegistryTotalWeightUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryTotalWeightUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryTotalWeightUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryTotalWeightUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryTotalWeightUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryTotalWeightUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryTotalWeightUpdated represents a TotalWeightUpdated event raised by the MotifRegistry contract.
type MotifRegistryTotalWeightUpdated struct {
	OldTotalWeight *big.Int
	NewTotalWeight *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTotalWeightUpdated is a free log retrieval operation binding the contract event 0x86dcf86b12dfeedea74ae9300dbdaa193bcce5809369c8177ea2f4eaaa65729b.
//
// Solidity: event TotalWeightUpdated(uint256 oldTotalWeight, uint256 newTotalWeight)
func (_MotifRegistry *MotifRegistryFilterer) FilterTotalWeightUpdated(opts *bind.FilterOpts) (*MotifRegistryTotalWeightUpdatedIterator, error) {

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "TotalWeightUpdated")
	if err != nil {
		return nil, err
	}
	return &MotifRegistryTotalWeightUpdatedIterator{contract: _MotifRegistry.contract, event: "TotalWeightUpdated", logs: logs, sub: sub}, nil
}

// WatchTotalWeightUpdated is a free log subscription operation binding the contract event 0x86dcf86b12dfeedea74ae9300dbdaa193bcce5809369c8177ea2f4eaaa65729b.
//
// Solidity: event TotalWeightUpdated(uint256 oldTotalWeight, uint256 newTotalWeight)
func (_MotifRegistry *MotifRegistryFilterer) WatchTotalWeightUpdated(opts *bind.WatchOpts, sink chan<- *MotifRegistryTotalWeightUpdated) (event.Subscription, error) {

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "TotalWeightUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryTotalWeightUpdated)
				if err := _MotifRegistry.contract.UnpackLog(event, "TotalWeightUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTotalWeightUpdated is a log parse operation binding the contract event 0x86dcf86b12dfeedea74ae9300dbdaa193bcce5809369c8177ea2f4eaaa65729b.
//
// Solidity: event TotalWeightUpdated(uint256 oldTotalWeight, uint256 newTotalWeight)
func (_MotifRegistry *MotifRegistryFilterer) ParseTotalWeightUpdated(log types.Log) (*MotifRegistryTotalWeightUpdated, error) {
	event := new(MotifRegistryTotalWeightUpdated)
	if err := _MotifRegistry.contract.UnpackLog(event, "TotalWeightUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the MotifRegistry contract.
type MotifRegistryUnpausedIterator struct {
	Event *MotifRegistryUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryUnpaused represents a Unpaused event raised by the MotifRegistry contract.
type MotifRegistryUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MotifRegistry *MotifRegistryFilterer) FilterUnpaused(opts *bind.FilterOpts) (*MotifRegistryUnpausedIterator, error) {

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &MotifRegistryUnpausedIterator{contract: _MotifRegistry.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MotifRegistry *MotifRegistryFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MotifRegistryUnpaused) (event.Subscription, error) {

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryUnpaused)
				if err := _MotifRegistry.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MotifRegistry *MotifRegistryFilterer) ParseUnpaused(log types.Log) (*MotifRegistryUnpaused, error) {
	event := new(MotifRegistryUnpaused)
	if err := _MotifRegistry.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MotifRegistryUpdateMinimumWeightIterator is returned from FilterUpdateMinimumWeight and is used to iterate over the raw logs and unpacked data for UpdateMinimumWeight events raised by the MotifRegistry contract.
type MotifRegistryUpdateMinimumWeightIterator struct {
	Event *MotifRegistryUpdateMinimumWeight // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MotifRegistryUpdateMinimumWeightIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MotifRegistryUpdateMinimumWeight)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MotifRegistryUpdateMinimumWeight)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MotifRegistryUpdateMinimumWeightIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MotifRegistryUpdateMinimumWeightIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MotifRegistryUpdateMinimumWeight represents a UpdateMinimumWeight event raised by the MotifRegistry contract.
type MotifRegistryUpdateMinimumWeight struct {
	OldMinimumWeight *big.Int
	NewMinimumWeight *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateMinimumWeight is a free log retrieval operation binding the contract event 0x1ea42186b305fa37310450d9fb87ea1e8f0c7f447e771479e3b27634bfe84dc1.
//
// Solidity: event UpdateMinimumWeight(uint256 oldMinimumWeight, uint256 newMinimumWeight)
func (_MotifRegistry *MotifRegistryFilterer) FilterUpdateMinimumWeight(opts *bind.FilterOpts) (*MotifRegistryUpdateMinimumWeightIterator, error) {

	logs, sub, err := _MotifRegistry.contract.FilterLogs(opts, "UpdateMinimumWeight")
	if err != nil {
		return nil, err
	}
	return &MotifRegistryUpdateMinimumWeightIterator{contract: _MotifRegistry.contract, event: "UpdateMinimumWeight", logs: logs, sub: sub}, nil
}

// WatchUpdateMinimumWeight is a free log subscription operation binding the contract event 0x1ea42186b305fa37310450d9fb87ea1e8f0c7f447e771479e3b27634bfe84dc1.
//
// Solidity: event UpdateMinimumWeight(uint256 oldMinimumWeight, uint256 newMinimumWeight)
func (_MotifRegistry *MotifRegistryFilterer) WatchUpdateMinimumWeight(opts *bind.WatchOpts, sink chan<- *MotifRegistryUpdateMinimumWeight) (event.Subscription, error) {

	logs, sub, err := _MotifRegistry.contract.WatchLogs(opts, "UpdateMinimumWeight")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MotifRegistryUpdateMinimumWeight)
				if err := _MotifRegistry.contract.UnpackLog(event, "UpdateMinimumWeight", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateMinimumWeight is a log parse operation binding the contract event 0x1ea42186b305fa37310450d9fb87ea1e8f0c7f447e771479e3b27634bfe84dc1.
//
// Solidity: event UpdateMinimumWeight(uint256 oldMinimumWeight, uint256 newMinimumWeight)
func (_MotifRegistry *MotifRegistryFilterer) ParseUpdateMinimumWeight(log types.Log) (*MotifRegistryUpdateMinimumWeight, error) {
	event := new(MotifRegistryUpdateMinimumWeight)
	if err := _MotifRegistry.contract.UnpackLog(event, "UpdateMinimumWeight", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
